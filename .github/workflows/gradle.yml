name: Java CI with Gradle & CD with Docker

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    # 1. JDK setting - github actions에서 사용할 JDK 설정
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. yml 파일 생성 & SSL 인증서 복사
    - name: make application.yml
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        touch ./keystore.p12
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.p12
      shell: bash

    # 3. gradle 세팅
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 4. 프로젝트 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test # 테스트 코드 제외

    # 5. Docker build & Push
    - name: Docker build & push to Docker hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}

    # 6. docker image pull & deploy
    - name: Docker image pull & Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.INSTANCE_HOST }} # 인스턴스 퍼블릭IP
        username: ${{ secrets.INSTANCE_USERNAME }}
        password: ${{ secrets.INSTANCE_PASSWORD }}
        # 도커 이미지 pull & deploy 작업
        script: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker rm -f $(docker ps -q --filter "name=spring-app")
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest
          docker run -d --name spring-app --network bitrun -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest
          docker image prune -f